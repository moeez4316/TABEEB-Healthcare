generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DoctorAvailability {
  id           String            @id @default(cuid())
  doctorUid    String            @db.VarChar(255)
  date         DateTime          @db.Date
  startTime    String            @db.VarChar(8)
  endTime      String            @db.VarChar(8)
  slotDuration Int               @default(30)
  isAvailable  Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  doctor       doctor            @relation(fields: [doctorUid], references: [uid], onDelete: Cascade)
  breakTimes   DoctorBreakTime[]

  @@unique([doctorUid, date])
  @@index([doctorUid])
  @@index([date])
  @@map("doctor_availability")
}

model DoctorBreakTime {
  id             String             @id @default(cuid())
  availabilityId String
  startTime      String             @db.VarChar(8)
  endTime        String             @db.VarChar(8)
  createdAt      DateTime           @default(now())
  availability   DoctorAvailability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  @@index([availabilityId])
  @@map("doctor_break_times")
}

model Appointment {
  id               String                      @id @default(cuid())
  doctorUid        String                      @db.VarChar(255)
  patientUid       String                      @db.VarChar(255)
  appointmentDate  DateTime                    @db.Date
  startTime        String                      @db.VarChar(8)
  endTime          String                      @db.VarChar(8)
  duration         Int                         @default(30)
  status           AppointmentStatus           @default(PENDING)
  patientNotes     String?                     @db.Text
  doctorNotes      String?                     @db.Text
  cancelReason     String?                     @db.Text
  consultationFees Decimal?                    @db.Decimal(10, 2)
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  completedAt      DateTime?
  sharedDocuments  AppointmentSharedDocument[]
  doctor           doctor                      @relation(fields: [doctorUid], references: [uid], onDelete: Cascade)
  patient          patient                     @relation(fields: [patientUid], references: [uid], onDelete: Cascade)
  prescriptions    Prescription[]
  videoCall        VideoCall?

  @@index([doctorUid])
  @@index([patientUid])
  @@index([appointmentDate])
  @@index([status])
  @@index([startTime])
  @@map("appointments")
}

model AppointmentSharedDocument {
  id            String      @id @default(cuid())
  appointmentId String      @db.VarChar(255)
  documentId    String      @db.VarChar(255)
  sharedAt      DateTime    @default(now())
  isVisible     Boolean     @default(true)
  sharedBy      String      @db.VarChar(255)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, documentId])
  @@index([appointmentId])
  @@index([documentId])
  @@index([sharedBy])
  @@map("appointment_shared_documents")
}

model Prescription {
  id                    String                 @id @default(cuid())
  prescriptionId        String                 @unique @default(uuid())
  doctorUid             String                 @db.VarChar(255)
  patientUid            String                 @db.VarChar(255)
  appointmentId         String?
  patientName           String
  patientAge            Int
  patientGender         String
  diagnosis             String?
  notes                 String?
  instructions          String?
  prescriptionStartDate DateTime               @default(now())
  prescriptionEndDate   DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isActive              Boolean                @default(true)
  medicines             PrescriptionMedicine[]
  appointment           Appointment?           @relation(fields: [appointmentId], references: [id])
  doctor                doctor                 @relation(fields: [doctorUid], references: [uid])
  patient               patient                @relation(fields: [patientUid], references: [uid])

  @@index([doctorUid])
  @@index([patientUid])
  @@index([appointmentId])
  @@index([prescriptionId])
  @@map("prescriptions")
}

model PrescriptionMedicine {
  id                 String            @id @default(cuid())
  prescriptionId     String
  medicineName       String
  dosage             String
  frequency          String
  duration           String
  durationDays       Int?
  instructions       String?
  timing             String?
  status             MedicationStatus  @default(ACTIVE)
  discontinuedAt     DateTime?
  discontinuedBy     String?           @db.VarChar(255)
  discontinuedReason String?           @db.Text
  modificationNotes  String?           @db.Text
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  prescription       Prescription      @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  @@index([prescriptionId])
  @@index([status])
  @@map("prescription_medicines")
}

model VideoCall {
  id              String          @id @default(cuid())
  appointmentId   String          @unique
  roomName        String          @db.VarChar(255)
  status          VideoCallStatus @default(SCHEDULED)
  startedAt       DateTime?
  endedAt         DateTime?
  duration        Int?
  doctorJoinedAt  DateTime?
  patientJoinedAt DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  appointment     Appointment     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@index([status])
  @@map("video_calls")
}

model doctor {
  uid                  String               @id @db.VarChar(255)
  firstName            String               @db.VarChar(100)
  lastName             String               @db.VarChar(100)
  name                 String               @db.VarChar(255)
  email                String               @unique(map: "Doctor_email_key") @db.VarChar(255)
  phone                String?              @db.VarChar(20)
  dateOfBirth          DateTime?
  gender               String?              @db.VarChar(10)
  profileImageUrl      String?              @db.VarChar(500)
  profileImagePublicId String?              @db.VarChar(255)
  specialization       String               @db.VarChar(100)
  qualification        String               @db.Text
  experience           String?              @db.VarChar(50)
  addressStreet        String?              @db.VarChar(255)
  addressCity          String?              @db.VarChar(100)
  addressProvince      String?              @db.VarChar(100)
  addressPostalCode    String?              @db.VarChar(10)
  language             String               @default("English") @db.VarChar(50)
  notificationsEmail   Boolean              @default(true)
  notificationsSms     Boolean              @default(true)
  notificationsPush    Boolean              @default(true)
  privacyShareData     Boolean              @default(false)
  privacyMarketing     Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  appointments         Appointment[]
  user                 user                 @relation(fields: [uid], references: [uid], map: "Doctor_uid_fkey")
  availability         DoctorAvailability[]
  prescriptions        Prescription[]
  verification         verification?
}

model patient {
  uid                          String         @id @db.VarChar(255)
  firstName                    String         @db.VarChar(100)
  lastName                     String         @db.VarChar(100)
  email                        String         @unique(map: "Patient_email_key") @db.VarChar(255)
  phone                        String?        @db.VarChar(20)
  cnic                         String?        @db.VarChar(15)
  dateOfBirth                  DateTime
  gender                       String         @db.VarChar(10)
  profileImageUrl              String?        @db.VarChar(500)
  profileImagePublicId         String?        @db.VarChar(255)
  bloodType                    String?        @db.VarChar(5)
  height                       String?        @db.VarChar(10)
  weight                       String?        @db.VarChar(10)
  allergies                    Json?
  medications                  Json?
  medicalConditions            Json?
  emergencyContactName         String?        @db.VarChar(255)
  emergencyContactRelationship String?        @db.VarChar(100)
  emergencyContactPhone        String?        @db.VarChar(20)
  addressStreet                String?        @db.VarChar(255)
  addressCity                  String?        @db.VarChar(100)
  addressProvince              String?        @db.VarChar(100)
  addressPostalCode            String?        @db.VarChar(10)
  language                     String         @default("English") @db.VarChar(50)
  notificationsEmail           Boolean        @default(true)
  notificationsSms             Boolean        @default(true)
  notificationsPush            Boolean        @default(true)
  privacyShareData             Boolean        @default(false)
  privacyMarketing             Boolean        @default(false)
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime
  appointments                 Appointment[]
  user                         user           @relation(fields: [uid], references: [uid], map: "Patient_uid_fkey")
  prescriptions                Prescription[]
}

model user {
  uid     String   @id @db.VarChar(255)
  role    String   @db.VarChar(50)
  doctor  doctor?
  patient patient?
}

model verification {
  doctorUid            String    @id @db.VarChar(255)
  isVerified           Boolean   @default(false)
  status               String    @default("pending") @db.VarChar(20)
  cnicNumber           String    @db.VarChar(15)
  pmdcNumber           String    @db.VarChar(50)
  pmdcRegistrationDate DateTime?
  graduationYear       String?   @db.VarChar(4)
  degreeInstitution    String?   @db.VarChar(255)
  cnicFrontUrl         String    @db.Text
  cnicBackUrl          String?   @db.Text
  verificationPhotoUrl String    @db.Text
  degreeCertificateUrl String    @db.Text
  pmdcCertificateUrl   String    @db.Text
  adminComments        String?   @db.Text
  submittedAt          DateTime  @default(now())
  reviewedAt           DateTime?
  reviewedBy           String?   @db.VarChar(255)
  doctor               doctor    @relation(fields: [doctorUid], references: [uid], map: "Verification_doctorUid_fkey")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum VideoCallStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
  NO_SHOW
}

enum MedicationStatus {
  ACTIVE
  DISCONTINUED
  COMPLETED
}
